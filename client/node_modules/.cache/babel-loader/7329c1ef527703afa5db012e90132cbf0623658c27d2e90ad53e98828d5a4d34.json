{"ast":null,"code":"var _jsxFileName = \"/Users/ramtinabolfazli/Documents/Work/Seniors and Juniors/Program/client/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport FileUpload from './components/FileUpload';\nimport LocationInput from './components/LocationInput';\nimport ProcessButton from './components/ProcessButton';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [files, setFiles] = useState([]); // Always initialize as array\n  const [location, setLocation] = useState('');\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  // Modified to handle both array and single file cases\n  const handleUploadComplete = async uploadedFiles => {\n    const filesArray = Array.isArray(uploadedFiles) ? uploadedFiles : [uploadedFiles];\n    setFiles(prev => [...prev, ...filesArray]);\n    try {\n      const photoFormData = new FormData();\n      const manufacturerFormData = new FormData();\n      for (const file of filesArray) {\n        var _file$type, _file$name, _file$name2;\n        if ((_file$type = file.type) !== null && _file$type !== void 0 && _file$type.startsWith('image/') || ['image/jpeg', 'image/png', 'image/jpg'].includes(file.type)) {\n          photoFormData.append('photos', file);\n        } else if ((_file$name = file.name) !== null && _file$name !== void 0 && _file$name.endsWith('.xlsx') || (_file$name2 = file.name) !== null && _file$name2 !== void 0 && _file$name2.endsWith('.xls')) {\n          manufacturerFormData.append('file', file);\n        }\n      }\n      if (photoFormData.has('photos')) {\n        const photoResponse = await fetch('http://localhost:5001/api/upload/photos', {\n          method: 'POST',\n          body: photoFormData\n        });\n        if (!photoResponse.ok) throw new Error('Photo upload failed');\n      }\n      if (manufacturerFormData.has('file')) {\n        const manufacturerResponse = await fetch('http://localhost:5001/api/upload/manufacturer', {\n          method: 'POST',\n          body: manufacturerFormData\n        });\n        if (!manufacturerResponse.ok) throw new Error('Manufacturer file upload failed');\n      }\n    } catch (error) {\n      console.error('Upload error:', error);\n      alert(`Upload failed: ${error.message}`);\n    }\n  };\n  const handleProcess = async () => {\n    setIsProcessing(true);\n    try {\n      // Validate files before processing\n      if (!(files !== null && files !== void 0 && files.length)) throw new Error('No files to process');\n\n      // Separate files into photos and manufacturer file\n      const photos = files.filter(file => {\n        var _file$type2;\n        return ((_file$type2 = file.type) === null || _file$type2 === void 0 ? void 0 : _file$type2.startsWith('image/')) || ['image/jpeg', 'image/png', 'image/jpg'].includes(file.type);\n      });\n      const manufacturerFile = files.find(file => {\n        var _file$name3, _file$name4;\n        return ((_file$name3 = file.name) === null || _file$name3 === void 0 ? void 0 : _file$name3.endsWith('.xlsx')) || ((_file$name4 = file.name) === null || _file$name4 === void 0 ? void 0 : _file$name4.endsWith('.xls'));\n      });\n\n      // Upload photos if any exist\n      if (photos.length > 0) {\n        const photoFormData = new FormData();\n        photos.forEach(photo => {\n          photoFormData.append('photos', photo);\n        });\n        const photoResponse = await fetch('http://localhost:5001/api/upload/photos', {\n          method: 'POST',\n          body: photoFormData\n        });\n        if (!photoResponse.ok) throw new Error('Photo upload failed');\n      }\n\n      // Upload manufacturer file if it exists\n      if (manufacturerFile) {\n        const manufacturerFormData = new FormData();\n        manufacturerFormData.append('file', manufacturerFile);\n        const manufacturerResponse = await fetch('http://localhost:5001/api/upload/manufacturer', {\n          method: 'POST',\n          body: manufacturerFormData\n        });\n        if (!manufacturerResponse.ok) throw new Error('Manufacturer file upload failed');\n      }\n\n      // Process data\n      const processResponse = await fetch('http://localhost:5001/api/process', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          locationNumber: location\n          // Include any additional processing parameters here\n        })\n      });\n      if (!processResponse.ok) {\n        const errorData = await processResponse.json().catch(() => ({}));\n        throw new Error(errorData.message || 'Processing failed');\n      }\n\n      // Download result\n      const blob = await processResponse.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `equipment_report_${location || new Date().toISOString()}.csv`;\n      document.body.appendChild(a);\n      a.click();\n      a.remove();\n    } catch (error) {\n      console.error('Processing error:', error);\n      alert(`Error: ${error.message}`);\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Equipment Processor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FileUpload, {\n      onUploadComplete: handleUploadComplete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LocationInput, {\n      value: location,\n      onChange: setLocation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ProcessButton, {\n      onClick: handleProcess,\n      disabled: !(files !== null && files !== void 0 && files.length) || !location || isProcessing,\n      loading: isProcessing\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"5E93AaK+OKW3GOJJYNjF1ivDIMg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","FileUpload","LocationInput","ProcessButton","jsxDEV","_jsxDEV","App","_s","files","setFiles","location","setLocation","isProcessing","setIsProcessing","handleUploadComplete","uploadedFiles","filesArray","Array","isArray","prev","photoFormData","FormData","manufacturerFormData","file","_file$type","_file$name","_file$name2","type","startsWith","includes","append","name","endsWith","has","photoResponse","fetch","method","body","ok","Error","manufacturerResponse","error","console","alert","message","handleProcess","length","photos","filter","_file$type2","manufacturerFile","find","_file$name3","_file$name4","forEach","photo","processResponse","headers","JSON","stringify","locationNumber","errorData","json","catch","blob","url","window","URL","createObjectURL","a","document","createElement","href","download","Date","toISOString","appendChild","click","remove","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onUploadComplete","value","onChange","onClick","disabled","loading","_c","$RefreshReg$"],"sources":["/Users/ramtinabolfazli/Documents/Work/Seniors and Juniors/Program/client/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport FileUpload from './components/FileUpload';\nimport LocationInput from './components/LocationInput';\nimport ProcessButton from './components/ProcessButton';\nimport './App.css';\n\nfunction App() {\n  const [files, setFiles] = useState([]); // Always initialize as array\n  const [location, setLocation] = useState('');\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  // Modified to handle both array and single file cases\nconst handleUploadComplete = async (uploadedFiles) => {\n  const filesArray = Array.isArray(uploadedFiles) ? uploadedFiles : [uploadedFiles];\n  setFiles(prev => [...prev, ...filesArray]);\n\n  try {\n    const photoFormData = new FormData();\n    const manufacturerFormData = new FormData();\n\n    for (const file of filesArray) {\n      if (file.type?.startsWith('image/') || ['image/jpeg', 'image/png', 'image/jpg'].includes(file.type)) {\n        photoFormData.append('photos', file);\n      } else if (file.name?.endsWith('.xlsx') || file.name?.endsWith('.xls')) {\n        manufacturerFormData.append('file', file);\n      }\n    }\n\n    if (photoFormData.has('photos')) {\n      const photoResponse = await fetch('http://localhost:5001/api/upload/photos', {\n        method: 'POST',\n        body: photoFormData\n      });\n      if (!photoResponse.ok) throw new Error('Photo upload failed');\n    }\n\n    if (manufacturerFormData.has('file')) {\n      const manufacturerResponse = await fetch(\n        'http://localhost:5001/api/upload/manufacturer',\n        {\n          method: 'POST',\n          body: manufacturerFormData\n        }\n      );\n      if (!manufacturerResponse.ok) throw new Error('Manufacturer file upload failed');\n    }\n  } catch (error) {\n    console.error('Upload error:', error);\n    alert(`Upload failed: ${error.message}`);\n  }\n};\n\n\nconst handleProcess = async () => {\n  setIsProcessing(true);\n  \n  try {\n    // Validate files before processing\n    if (!files?.length) throw new Error('No files to process');\n\n    // Separate files into photos and manufacturer file\n    const photos = files.filter(file => \n      file.type?.startsWith('image/') || \n      ['image/jpeg', 'image/png', 'image/jpg'].includes(file.type)\n    );\n    \n    const manufacturerFile = files.find(file => \n      file.name?.endsWith('.xlsx') || \n      file.name?.endsWith('.xls')\n    );\n\n    // Upload photos if any exist\n    if (photos.length > 0) {\n      const photoFormData = new FormData();\n      photos.forEach(photo => {\n        photoFormData.append('photos', photo);\n      });\n\n      const photoResponse = await fetch('http://localhost:5001/api/upload/photos', {\n        method: 'POST',\n        body: photoFormData\n      });\n      if (!photoResponse.ok) throw new Error('Photo upload failed');\n    }\n\n    // Upload manufacturer file if it exists\n    if (manufacturerFile) {\n      const manufacturerFormData = new FormData();\n      manufacturerFormData.append('file', manufacturerFile);\n\n      const manufacturerResponse = await fetch(\n        'http://localhost:5001/api/upload/manufacturer',\n        {\n          method: 'POST',\n          body: manufacturerFormData\n        }\n      );\n      if (!manufacturerResponse.ok) throw new Error('Manufacturer file upload failed');\n    }\n\n    // Process data\n    const processResponse = await fetch('http://localhost:5001/api/process', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ \n        locationNumber: location,\n        // Include any additional processing parameters here\n      })\n    });\n\n    if (!processResponse.ok) {\n      const errorData = await processResponse.json().catch(() => ({}));\n      throw new Error(errorData.message || 'Processing failed');\n    }\n\n    // Download result\n    const blob = await processResponse.blob();\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `equipment_report_${location || new Date().toISOString()}.csv`;\n    document.body.appendChild(a);\n    a.click();\n    a.remove();\n\n  } catch (error) {\n    console.error('Processing error:', error);\n    alert(`Error: ${error.message}`);\n  } finally {\n    setIsProcessing(false);\n  }\n};\n\n  return (\n    <div className=\"app-container\">\n      <h1>Equipment Processor</h1>\n      <FileUpload onUploadComplete={handleUploadComplete} />\n      <LocationInput value={location} onChange={setLocation} />\n      <ProcessButton \n        onClick={handleProcess} \n        disabled={!files?.length || !location || isProcessing}\n        loading={isProcessing}\n      />\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}