{"ast":null,"code":"var _jsxFileName = \"/Users/ramtinabolfazli/Documents/Work/Seniors and Juniors/Program/client/src/pages/JHA.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport FileUpload from '../components/FileUpload';\nimport ProcessButton from '../components/ProcessButton';\nimport '../styles/Decoms.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Decoms() {\n  _s();\n  const [files, setFiles] = useState([]);\n  const [location, setLocation] = useState('');\n  const [isProcessing, setIsProcessing] = useState(false);\n  const handleUploadComplete = (uploadedFiles, uploadedLocation) => {\n    const filesArray = Array.isArray(uploadedFiles) ? uploadedFiles : [uploadedFiles];\n    setFiles(prev => [...prev, ...filesArray]);\n    setLocation(uploadedLocation); // Save location from FileUpload\n  };\n  const handleProcess = async () => {\n    setIsProcessing(true);\n    try {\n      // Basic validation\n      if (!files.length) throw new Error('No files uploaded');\n      if (!location) throw new Error('Location is missing');\n\n      // First verify backend is reachable\n      // First verify backend is reachable\n      try {\n        const healthCheck = await fetch('http://localhost:5002', {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        if (!healthCheck.ok) {\n          const healthText = await healthCheck.text();\n          throw new Error(`Backend responded with: ${healthText}`);\n        }\n      } catch (healthError) {\n        throw new Error(`Cannot connect to backend: ${healthError.message}`);\n      }\n      // Make the API call\n      const response = await fetch('http://localhost:5002/api/process', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          locationNumber: location\n        })\n      });\n      if (!response.ok) {\n        let errorData = {};\n        try {\n          errorData = await response.json();\n        } catch {\n          errorData = {\n            message: await response.text()\n          };\n        }\n        throw new Error(errorData.message || `Server error: ${response.status}`);\n      }\n\n      // Handle successful response\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `equipment_report_${location}.csv`;\n      document.body.appendChild(a);\n      a.click();\n      a.remove();\n    } catch (error) {\n      console.error('Processing error:', {\n        message: error.message,\n        stack: error.stack,\n        response: error.response\n      });\n      alert(`Error: ${error.message}\\n\\nPlease check:\\n1. Backend server is running\\n2. Correct files are uploaded\\n3. Console for details`);\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Equipment Processor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FileUpload, {\n      onUploadComplete: handleUploadComplete,\n      location: location,\n      setLocation: setLocation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ProcessButton, {\n      onClick: handleProcess,\n      disabled: !files.length || !location || isProcessing,\n      loading: isProcessing\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n_s(Decoms, \"5E93AaK+OKW3GOJJYNjF1ivDIMg=\");\n_c = Decoms;\nexport default Decoms;\nvar _c;\n$RefreshReg$(_c, \"Decoms\");","map":{"version":3,"names":["React","useState","FileUpload","ProcessButton","jsxDEV","_jsxDEV","Decoms","_s","files","setFiles","location","setLocation","isProcessing","setIsProcessing","handleUploadComplete","uploadedFiles","uploadedLocation","filesArray","Array","isArray","prev","handleProcess","length","Error","healthCheck","fetch","method","headers","ok","healthText","text","healthError","message","response","body","JSON","stringify","locationNumber","errorData","json","status","blob","url","window","URL","createObjectURL","a","document","createElement","href","download","appendChild","click","remove","error","console","stack","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onUploadComplete","onClick","disabled","loading","_c","$RefreshReg$"],"sources":["/Users/ramtinabolfazli/Documents/Work/Seniors and Juniors/Program/client/src/pages/JHA.js"],"sourcesContent":["import React, { useState } from 'react';\nimport FileUpload from '../components/FileUpload';\nimport ProcessButton from '../components/ProcessButton';\nimport '../styles/Decoms.css';\n\nfunction Decoms() {\n  const [files, setFiles] = useState([]);\n  const [location, setLocation] = useState('');\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const handleUploadComplete = (uploadedFiles, uploadedLocation) => {\n    const filesArray = Array.isArray(uploadedFiles) ? uploadedFiles : [uploadedFiles];\n    setFiles(prev => [...prev, ...filesArray]);\n    setLocation(uploadedLocation); // Save location from FileUpload\n  };\n\nconst handleProcess = async () => {\n  setIsProcessing(true);\n\n  try {\n    // Basic validation\n    if (!files.length) throw new Error('No files uploaded');\n    if (!location) throw new Error('Location is missing');\n\n    // First verify backend is reachable\n    // First verify backend is reachable\n    try {\n      const healthCheck = await fetch('http://localhost:5002', {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' }\n      });\n      \n  if (!healthCheck.ok) {\n    const healthText = await healthCheck.text();\n    throw new Error(`Backend responded with: ${healthText}`);\n  }\n} catch (healthError) {\n  throw new Error(`Cannot connect to backend: ${healthError.message}`);\n}\n    // Make the API call\n    const response = await fetch('http://localhost:5002/api/process', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ locationNumber: location })\n    });\n\n    if (!response.ok) {\n      let errorData = {};\n      try {\n        errorData = await response.json();\n      } catch {\n        errorData = { message: await response.text() };\n      }\n      throw new Error(errorData.message || `Server error: ${response.status}`);\n    }\n\n    // Handle successful response\n    const blob = await response.blob();\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `equipment_report_${location}.csv`;\n    document.body.appendChild(a);\n    a.click();\n    a.remove();\n\n  } catch (error) {\n    console.error('Processing error:', {\n      message: error.message,\n      stack: error.stack,\n      response: error.response\n    });\n    \n    alert(`Error: ${error.message}\\n\\nPlease check:\\n1. Backend server is running\\n2. Correct files are uploaded\\n3. Console for details`);\n  } finally {\n    setIsProcessing(false);\n  }\n};\n\n  return (\n    <div className=\"app-container\">\n      <h1>Equipment Processor</h1>\n      <FileUpload onUploadComplete={handleUploadComplete} \n                  location={location}\n                  setLocation={setLocation}/>\n      <ProcessButton \n        onClick={handleProcess} \n        disabled={!files.length || !location || isProcessing}\n        loading={isProcessing}\n      />\n    </div>\n  );\n}\n\nexport default Decoms;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}