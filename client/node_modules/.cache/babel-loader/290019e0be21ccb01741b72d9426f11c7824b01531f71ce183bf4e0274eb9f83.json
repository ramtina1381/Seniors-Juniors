{"ast":null,"code":"var _jsxFileName = \"/Users/ramtinabolfazli/Documents/Work/Seniors and Juniors/Program/client/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport FileUpload from './components/FileUpload';\nimport LocationInput from './components/LocationInput';\nimport ProcessButton from './components/ProcessButton';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [files, setFiles] = useState([]); // Always initialize as array\n  const [location, setLocation] = useState('');\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  // Modified to handle both array and single file cases\n  const handleUploadComplete = uploadedFiles => {\n    setFiles(prev => [...prev, ...(Array.isArray(uploadedFiles) ? uploadedFiles : [uploadedFiles])]);\n  };\n  const handleProcess = async () => {\n    setIsProcessing(true);\n    try {\n      // Validate files before processing\n      if (!(files !== null && files !== void 0 && files.length)) throw new Error('No files to process');\n\n      // Separate files into photos and manufacturer file\n      const photos = files.filter(file => {\n        var _file$type;\n        return ((_file$type = file.type) === null || _file$type === void 0 ? void 0 : _file$type.startsWith('image/')) || ['image/jpeg', 'image/png', 'image/jpg'].includes(file.type);\n      });\n      const manufacturerFile = files.find(file => {\n        var _file$name, _file$name2;\n        return ((_file$name = file.name) === null || _file$name === void 0 ? void 0 : _file$name.endsWith('.xlsx')) || ((_file$name2 = file.name) === null || _file$name2 === void 0 ? void 0 : _file$name2.endsWith('.xls'));\n      });\n\n      // Upload photos if any exist\n      if (photos.length > 0) {\n        const photoFormData = new FormData();\n        photos.forEach(photo => {\n          photoFormData.append('photos', photo);\n        });\n        const photoResponse = await fetch('http://localhost:5001/api/upload/photos', {\n          method: 'POST',\n          body: photoFormData\n        });\n        if (!photoResponse.ok) throw new Error('Photo upload failed');\n      }\n\n      // Upload manufacturer file if it exists\n      if (manufacturerFile) {\n        const manufacturerFormData = new FormData();\n        manufacturerFormData.append('file', manufacturerFile);\n        const manufacturerResponse = await fetch('http://localhost:5001/api/upload/manufacturer', {\n          method: 'POST',\n          body: manufacturerFormData\n        });\n        if (!manufacturerResponse.ok) throw new Error('Manufacturer file upload failed');\n      }\n\n      // Process data\n      const processResponse = await fetch('http://localhost:5001/api/process', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          locationNumber: location\n          // Include any additional processing parameters here\n        })\n      });\n      if (!processResponse.ok) {\n        const errorData = await processResponse.json().catch(() => ({}));\n        throw new Error(errorData.message || 'Processing failed');\n      }\n\n      // Download result\n      const blob = await processResponse.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `equipment_report_${location || new Date().toISOString()}.csv`;\n      document.body.appendChild(a);\n      a.click();\n      a.remove();\n    } catch (error) {\n      console.error('Processing error:', error);\n      alert(`Error: ${error.message}`);\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Equipment Processor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FileUpload, {\n      onUploadComplete: handleUploadComplete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LocationInput, {\n      value: location,\n      onChange: setLocation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ProcessButton, {\n      onClick: handleProcess,\n      disabled: !(files !== null && files !== void 0 && files.length) || !location || isProcessing,\n      loading: isProcessing\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"5E93AaK+OKW3GOJJYNjF1ivDIMg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","FileUpload","LocationInput","ProcessButton","jsxDEV","_jsxDEV","App","_s","files","setFiles","location","setLocation","isProcessing","setIsProcessing","handleUploadComplete","uploadedFiles","prev","Array","isArray","handleProcess","length","Error","photos","filter","file","_file$type","type","startsWith","includes","manufacturerFile","find","_file$name","_file$name2","name","endsWith","photoFormData","FormData","forEach","photo","append","photoResponse","fetch","method","body","ok","manufacturerFormData","manufacturerResponse","processResponse","headers","JSON","stringify","locationNumber","errorData","json","catch","message","blob","url","window","URL","createObjectURL","a","document","createElement","href","download","Date","toISOString","appendChild","click","remove","error","console","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onUploadComplete","value","onChange","onClick","disabled","loading","_c","$RefreshReg$"],"sources":["/Users/ramtinabolfazli/Documents/Work/Seniors and Juniors/Program/client/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport FileUpload from './components/FileUpload';\nimport LocationInput from './components/LocationInput';\nimport ProcessButton from './components/ProcessButton';\nimport './App.css';\n\nfunction App() {\n  const [files, setFiles] = useState([]); // Always initialize as array\n  const [location, setLocation] = useState('');\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  // Modified to handle both array and single file cases\n  const handleUploadComplete = (uploadedFiles) => {\n    setFiles(prev => [\n      ...prev,\n      ...(Array.isArray(uploadedFiles) ? uploadedFiles : [uploadedFiles])\n    ]);\n  };\n\nconst handleProcess = async () => {\n  setIsProcessing(true);\n  \n  try {\n    // Validate files before processing\n    if (!files?.length) throw new Error('No files to process');\n\n    // Separate files into photos and manufacturer file\n    const photos = files.filter(file => \n      file.type?.startsWith('image/') || \n      ['image/jpeg', 'image/png', 'image/jpg'].includes(file.type)\n    );\n    \n    const manufacturerFile = files.find(file => \n      file.name?.endsWith('.xlsx') || \n      file.name?.endsWith('.xls')\n    );\n\n    // Upload photos if any exist\n    if (photos.length > 0) {\n      const photoFormData = new FormData();\n      photos.forEach(photo => {\n        photoFormData.append('photos', photo);\n      });\n\n      const photoResponse = await fetch('http://localhost:5001/api/upload/photos', {\n        method: 'POST',\n        body: photoFormData\n      });\n      if (!photoResponse.ok) throw new Error('Photo upload failed');\n    }\n\n    // Upload manufacturer file if it exists\n    if (manufacturerFile) {\n      const manufacturerFormData = new FormData();\n      manufacturerFormData.append('file', manufacturerFile);\n\n      const manufacturerResponse = await fetch(\n        'http://localhost:5001/api/upload/manufacturer',\n        {\n          method: 'POST',\n          body: manufacturerFormData\n        }\n      );\n      if (!manufacturerResponse.ok) throw new Error('Manufacturer file upload failed');\n    }\n\n    // Process data\n    const processResponse = await fetch('http://localhost:5001/api/process', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ \n        locationNumber: location,\n        // Include any additional processing parameters here\n      })\n    });\n\n    if (!processResponse.ok) {\n      const errorData = await processResponse.json().catch(() => ({}));\n      throw new Error(errorData.message || 'Processing failed');\n    }\n\n    // Download result\n    const blob = await processResponse.blob();\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `equipment_report_${location || new Date().toISOString()}.csv`;\n    document.body.appendChild(a);\n    a.click();\n    a.remove();\n\n  } catch (error) {\n    console.error('Processing error:', error);\n    alert(`Error: ${error.message}`);\n  } finally {\n    setIsProcessing(false);\n  }\n};\n\n  return (\n    <div className=\"app-container\">\n      <h1>Equipment Processor</h1>\n      <FileUpload onUploadComplete={handleUploadComplete} />\n      <LocationInput value={location} onChange={setLocation} />\n      <ProcessButton \n        onClick={handleProcess} \n        disabled={!files?.length || !location || isProcessing}\n        loading={isProcessing}\n      />\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}